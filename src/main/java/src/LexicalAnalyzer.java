// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/src/scanner.lex

package src;

import java.util.*;
import Token.java;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexicalAnalyzer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\3\u0100\1\u0e00\205\u0100\1\u0600\1\u0100\1\u0f00\1\u1000\1\u1100"+
    "\1\u1200\54\u0100\10\u1300\37\u0100\1\u0900\4\u0100\1\u1400\10\u0100"+
    "\1\u1500\2\u0100\1\u1600\1\u1700\1\u1200\1\u0100\1\u0500\1\u0100"+
    "\1\u1800\1\u1500\1\u0800\3\u0100\1\u1100\1\u1900\114\u0100\1\u1a00"+
    "\1\u1100\153\u0100\1\u1b00\11\u0100\1\u1c00\1\u1200\6\u0100\1\u1100"+
    "\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\5\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\0\1\16\12\17\1\20\1\21\1\22\1\23"+
    "\1\22\2\0\32\24\1\25\1\0\1\26\1\0\1\27"+
    "\1\0\1\30\1\31\1\32\1\33\1\34\1\35\1\24"+
    "\1\36\1\37\1\24\1\40\1\41\1\24\1\42\1\43"+
    "\2\24\1\44\1\45\1\46\1\47\1\24\1\50\3\24"+
    "\1\51\1\0\1\52\7\0\1\3\u01da\0\12\53\206\0"+
    "\12\53\306\0\12\53\234\0\12\53\166\0\12\53\140\0"+
    "\12\53\166\0\12\53\106\0\12\53\u0116\0\12\53\106\0"+
    "\12\53\u0146\0\12\53\46\0\12\53\u012c\0\12\53\200\0"+
    "\12\53\246\0\12\53\6\0\12\53\266\0\12\53\126\0"+
    "\12\53\206\0\12\53\6\0\12\53\316\0\2\3\u01a6\0"+
    "\12\53\46\0\12\53\306\0\12\53\26\0\12\53\126\0"+
    "\12\53\u0196\0\12\53\6\0\u0100\3\240\0\12\53\206\0"+
    "\12\53\u012c\0\12\53\200\0\12\53\74\0\12\53\220\0"+
    "\12\53\166\0\12\53\146\0\12\53\206\0\12\53\106\0"+
    "\12\53\266\0\12\53\u0164\0\62\53\100\0\12\53\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7424];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\5\1\53\0\1\3\66\0\1\3"+
    "\45\0\1\3\102\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\54\0\130\0\204\0\260\0\334\0\u0108"+
    "\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268"+
    "\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8"+
    "\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528"+
    "\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688"+
    "\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8"+
    "\0\u0814\0\u0840\0\u086c\0\54\0\u0898\0\u08c4\0\u08f0\0\u091c"+
    "\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c"+
    "\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc"+
    "\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c"+
    "\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c"+
    "\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc"+
    "\0\u1028\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c"+
    "\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc"+
    "\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c"+
    "\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c"+
    "\0\u15a8\0\u15d4\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc"+
    "\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c"+
    "\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c"+
    "\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc"+
    "\0\u1b28\0\u1b54\0\u1b80\0\u1bac\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c"+
    "\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38\0\u1d64\0\u1d90\0\u1dbc"+
    "\0\u1de8\0\u1e14\0\u1e40\0\u1e6c\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c"+
    "\0\u1f48\0\u1f74\0\u1fa0\0\u1fcc\0\u1ff8\0\u2024\0\u2050\0\u207c"+
    "\0\u20a8\0\u20d4\0\u2100\0\u212c\0\u2158\0\u2184\0\u21b0\0\u21dc"+
    "\0\u2208\0\u2234\0\u2260\0\u228c\0\u22b8\0\u22e4\0\u2310\0\u233c"+
    "\0\u2368\0\u2394\0\u23c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\4\3\24\2\1\4\2\2\1\5\1\2\1\6"+
    "\5\2\1\7\2\2\1\10\3\2\112\0\1\11\56\0"+
    "\1\12\1\0\1\13\45\0\1\14\4\0\1\15\61\0"+
    "\1\16\41\0\1\17\45\0\1\20\66\0\1\21\54\0"+
    "\1\22\17\0\1\23\111\0\1\24\44\0\1\25\53\0"+
    "\1\26\60\0\1\24\37\0\1\15\24\0\2\22\1\0"+
    "\2\22\2\0\1\27\44\0\2\23\1\0\2\23\1\30"+
    "\10\0\1\31\2\0\1\32\1\30\1\33\2\0\1\31"+
    "\21\33\4\0\2\34\1\0\1\34\1\35\114\0\1\36"+
    "\46\0\1\37\44\0\1\40\2\0\1\41\1\0\1\42"+
    "\37\0\1\43\31\0\2\44\1\0\2\44\1\30\10\0"+
    "\1\31\2\0\1\32\1\30\1\31\2\0\22\31\4\0"+
    "\2\43\1\0\2\43\3\0\1\45\5\0\1\46\3\0"+
    "\1\43\1\47\2\0\1\46\21\47\4\0\2\44\1\0"+
    "\2\44\1\30\10\0\1\33\2\0\1\32\1\30\1\33"+
    "\1\50\1\0\22\33\27\0\1\51\3\0\21\51\5\0"+
    "\1\34\21\0\1\51\3\0\21\51\35\0\1\52\55\0"+
    "\1\53\55\0\1\54\56\0\1\55\54\0\1\56\12\0"+
    "\2\43\1\0\2\43\3\0\1\45\5\0\1\46\4\0"+
    "\1\47\2\0\1\46\21\47\4\0\2\44\1\0\2\44"+
    "\1\30\13\0\1\32\1\30\31\0\2\45\1\0\2\45"+
    "\43\0\1\57\3\0\2\60\1\0\2\60\3\0\1\45"+
    "\5\0\1\46\4\0\1\46\2\0\22\46\4\0\2\60"+
    "\1\0\2\60\3\0\1\45\5\0\1\47\4\0\1\47"+
    "\1\61\1\0\22\47\22\0\1\62\33\0\1\62\14\0"+
    "\1\63\2\0\1\51\1\0\1\64\2\0\1\51\1\65"+
    "\1\0\22\51\41\0\1\66\16\0\2\53\1\0\2\53"+
    "\2\0\1\67\73\0\1\70\66\0\1\71\56\0\1\72"+
    "\6\0\2\57\1\0\2\57\16\0\1\73\3\0\21\73"+
    "\4\0\2\60\1\0\2\60\3\0\1\45\61\0\1\74"+
    "\33\0\1\74\17\0\1\62\6\0\1\44\24\0\1\62"+
    "\1\0\2\34\1\0\1\34\1\35\16\0\1\51\3\0"+
    "\21\51\22\0\1\75\33\0\1\75\1\0\2\66\1\0"+
    "\2\66\2\0\1\76\44\0\2\67\1\0\2\67\1\77"+
    "\10\0\1\100\2\0\1\101\1\77\1\102\2\0\1\100"+
    "\21\102\47\0\1\72\37\0\1\56\24\0\2\103\1\0"+
    "\1\103\1\104\47\0\2\105\1\0\2\105\4\0\2\106"+
    "\1\0\1\106\1\0\1\73\3\0\1\107\1\73\1\110"+
    "\1\0\22\73\22\0\1\74\6\0\1\60\24\0\1\74"+
    "\17\0\1\75\6\0\1\111\24\0\1\75\1\0\2\76"+
    "\1\0\2\76\16\0\1\112\3\0\21\112\26\0\1\113"+
    "\31\0\2\114\1\0\2\114\1\77\10\0\1\100\2\0"+
    "\1\101\1\77\1\100\2\0\22\100\4\0\2\113\1\0"+
    "\2\113\3\0\1\115\5\0\1\116\3\0\1\113\1\117"+
    "\2\0\1\116\21\117\4\0\2\114\1\0\2\114\1\77"+
    "\10\0\1\102\2\0\1\101\1\77\1\102\1\120\1\0"+
    "\22\102\27\0\1\121\3\0\21\121\5\0\1\103\21\0"+
    "\1\121\3\0\21\121\4\0\2\105\1\0\2\105\4\0"+
    "\2\106\1\0\1\106\5\0\1\107\53\0\1\107\31\0"+
    "\2\107\1\0\2\107\16\0\1\122\3\0\21\122\22\0"+
    "\1\123\33\0\1\123\14\0\1\63\4\0\1\64\33\0"+
    "\2\124\1\0\2\124\3\0\1\125\5\0\1\112\4\0"+
    "\1\112\1\126\1\0\22\112\4\0\2\113\1\0\2\113"+
    "\3\0\1\115\5\0\1\116\4\0\1\117\2\0\1\116"+
    "\21\117\4\0\2\114\1\0\2\114\1\77\13\0\1\101"+
    "\1\77\31\0\2\115\1\0\2\115\43\0\1\127\3\0"+
    "\2\130\1\0\2\130\3\0\1\115\5\0\1\116\4\0"+
    "\1\116\2\0\22\116\4\0\2\130\1\0\2\130\3\0"+
    "\1\115\5\0\1\117\4\0\1\117\1\131\1\0\22\117"+
    "\22\0\1\132\33\0\1\132\17\0\1\121\1\0\1\133"+
    "\2\0\1\121\1\134\1\0\22\121\4\0\2\135\1\0"+
    "\2\135\4\0\2\136\1\0\2\136\1\122\1\0\1\137"+
    "\2\0\1\122\1\140\1\0\22\122\22\0\1\123\6\0"+
    "\1\105\24\0\1\123\1\0\2\124\1\0\2\124\3\0"+
    "\1\125\43\0\2\125\1\0\2\125\43\0\1\141\21\0"+
    "\1\142\33\0\1\142\1\0\2\127\1\0\2\127\16\0"+
    "\1\143\3\0\21\143\4\0\2\130\1\0\2\130\3\0"+
    "\1\115\61\0\1\144\33\0\1\144\17\0\1\132\6\0"+
    "\1\114\24\0\1\132\1\0\2\133\1\0\2\133\1\145"+
    "\10\0\1\146\2\0\1\147\1\145\1\150\2\0\1\146"+
    "\21\150\22\0\1\151\33\0\1\151\1\0\2\135\1\0"+
    "\2\135\4\0\2\136\1\0\2\136\2\0\1\137\33\0"+
    "\2\136\1\0\2\136\16\0\1\152\3\0\21\152\4\0"+
    "\2\137\1\0\2\137\16\0\1\73\3\0\21\73\1\0"+
    "\1\153\20\0\1\154\33\0\1\154\1\0\2\141\1\0"+
    "\2\141\24\0\1\155\40\0\1\142\6\0\1\124\24\0"+
    "\1\142\1\0\2\156\1\0\2\156\4\0\2\157\1\0"+
    "\1\157\1\0\1\143\3\0\1\160\1\143\1\161\1\0"+
    "\22\143\22\0\1\144\6\0\1\130\24\0\1\144\23\0"+
    "\1\162\31\0\2\163\1\0\2\163\1\145\10\0\1\146"+
    "\2\0\1\147\1\145\1\146\2\0\22\146\4\0\2\162"+
    "\1\0\2\162\11\0\1\164\1\0\1\165\1\0\1\162"+
    "\1\166\2\0\1\164\21\166\4\0\2\163\1\0\2\163"+
    "\1\145\10\0\1\150\2\0\1\147\1\145\1\150\1\167"+
    "\1\0\22\150\22\0\1\151\6\0\1\170\24\0\1\151"+
    "\1\0\2\171\1\0\2\171\11\0\1\152\1\0\1\137"+
    "\2\0\1\152\1\172\1\0\22\152\4\0\2\153\1\0"+
    "\2\153\26\0\1\173\36\0\1\154\6\0\1\135\24\0"+
    "\1\154\30\0\1\174\24\0\2\156\1\0\2\156\4\0"+
    "\2\157\1\0\1\157\5\0\1\160\53\0\1\160\31\0"+
    "\2\160\1\0\2\160\16\0\1\175\3\0\21\175\22\0"+
    "\1\176\33\0\1\176\1\0\2\162\1\0\2\162\11\0"+
    "\1\164\1\0\1\165\2\0\1\166\2\0\1\164\21\166"+
    "\4\0\2\163\1\0\2\163\1\145\13\0\1\147\1\145"+
    "\31\0\2\177\1\0\2\177\11\0\1\164\1\0\1\165"+
    "\2\0\1\164\2\0\22\164\4\0\2\165\1\0\2\165"+
    "\16\0\1\200\3\0\21\200\4\0\2\177\1\0\2\177"+
    "\11\0\1\166\1\0\1\165\2\0\1\166\1\201\1\0"+
    "\22\166\22\0\1\202\33\0\1\202\21\0\1\133\33\0"+
    "\2\171\1\0\2\171\13\0\1\137\51\0\1\203\33\0"+
    "\1\203\41\0\1\204\57\0\1\205\7\0\2\206\1\0"+
    "\2\206\4\0\2\207\1\0\2\207\1\175\1\0\1\210"+
    "\2\0\1\175\1\211\1\0\22\175\22\0\1\176\6\0"+
    "\1\156\24\0\1\176\1\0\2\177\1\0\2\177\13\0"+
    "\1\165\45\0\1\212\1\0\1\213\1\0\1\200\4\0"+
    "\1\200\1\214\1\0\22\200\22\0\1\215\33\0\1\215"+
    "\17\0\1\202\6\0\1\163\24\0\1\202\17\0\1\203"+
    "\6\0\1\171\24\0\1\203\45\0\1\216\42\0\1\217"+
    "\20\0\2\206\1\0\2\206\4\0\2\207\1\0\2\207"+
    "\2\0\1\210\33\0\2\207\1\0\2\207\16\0\1\220"+
    "\3\0\21\220\4\0\2\210\1\0\2\210\16\0\1\143"+
    "\3\0\21\143\1\0\1\221\20\0\1\222\33\0\1\222"+
    "\13\0\1\223\55\0\1\223\55\0\1\224\33\0\1\224"+
    "\17\0\1\215\6\0\1\177\24\0\1\215\34\0\1\115"+
    "\20\0\2\225\1\0\2\225\47\0\2\226\1\0\2\226"+
    "\11\0\1\220\1\0\1\210\2\0\1\220\1\227\1\0"+
    "\22\220\4\0\2\221\1\0\2\221\65\0\1\222\6\0"+
    "\1\206\24\0\1\222\11\0\1\115\61\0\1\224\6\0"+
    "\1\230\24\0\1\224\1\0\2\225\1\0\2\225\1\0"+
    "\1\231\7\0\1\232\4\0\1\233\3\0\21\233\4\0"+
    "\2\226\1\0\2\226\13\0\1\210\51\0\1\234\33\0"+
    "\1\234\13\0\1\212\1\0\1\213\62\0\1\235\3\0"+
    "\21\235\4\0\2\232\1\0\2\232\12\0\1\236\34\0"+
    "\2\232\1\0\2\232\11\0\1\233\1\236\3\0\1\233"+
    "\1\237\1\0\22\233\22\0\1\234\6\0\1\226\24\0"+
    "\1\234\7\0\1\232\14\0\1\235\3\0\21\235\4\0"+
    "\2\236\1\0\2\236\43\0\1\240\21\0\1\241\33\0"+
    "\1\241\1\0\2\240\1\0\2\240\16\0\1\242\3\0"+
    "\21\242\22\0\1\241\6\0\1\232\24\0\1\241\1\0"+
    "\2\243\1\0\2\243\4\0\2\244\1\0\1\244\1\0"+
    "\1\242\3\0\1\245\1\242\1\246\1\0\22\242\4\0"+
    "\2\243\1\0\2\243\4\0\2\244\1\0\1\244\5\0"+
    "\1\245\53\0\1\245\31\0\2\245\1\0\2\245\16\0"+
    "\1\247\3\0\21\247\22\0\1\250\33\0\1\250\1\0"+
    "\2\251\1\0\2\251\4\0\2\252\1\0\2\252\1\247"+
    "\1\0\1\253\2\0\1\247\1\254\1\0\22\247\22\0"+
    "\1\250\6\0\1\243\24\0\1\250\1\0\2\251\1\0"+
    "\2\251\4\0\2\252\1\0\2\252\2\0\1\253\33\0"+
    "\2\252\1\0\2\252\16\0\1\255\3\0\21\255\4\0"+
    "\2\253\1\0\2\253\16\0\1\242\3\0\1\242\1\256"+
    "\17\242\22\0\1\257\33\0\1\257\1\0\2\260\1\0"+
    "\2\260\11\0\1\255\1\0\1\253\2\0\1\255\1\261"+
    "\1\0\22\255\4\0\2\243\1\0\2\243\4\0\2\244"+
    "\1\0\1\244\1\0\1\242\3\0\1\245\1\242\1\246"+
    "\1\0\15\242\1\262\4\242\22\0\1\257\6\0\1\251"+
    "\24\0\1\257\1\0\2\260\1\0\2\260\13\0\1\253"+
    "\51\0\1\263\33\0\1\263\1\0\2\243\1\0\2\243"+
    "\4\0\2\244\1\0\1\244\1\0\1\242\3\0\1\245"+
    "\1\242\1\246\1\0\5\242\1\264\14\242\22\0\1\263"+
    "\6\0\1\260\24\0\1\263\1\0\2\243\1\0\2\243"+
    "\4\0\2\244\1\0\1\244\1\0\1\242\3\0\1\245"+
    "\1\242\1\246\1\0\1\242\1\265\20\242\4\0\2\243"+
    "\1\0\2\243\4\0\2\244\1\0\1\244\1\0\1\242"+
    "\3\0\1\245\1\242\1\246\1\0\11\242\1\266\10\242"+
    "\4\0\2\267\1\0\2\267\4\0\2\244\1\0\1\244"+
    "\1\0\1\242\1\0\1\270\1\0\1\245\1\242\1\246"+
    "\1\0\22\242\4\0\2\267\1\0\2\267\4\0\2\244"+
    "\1\0\1\244\3\0\1\270\1\0\1\245\31\0\2\270"+
    "\1\0\2\270\44\0\1\271\2\0\2\271\1\0\2\271"+
    "\24\0\1\155\1\272\16\0\1\64\35\0\1\273\54\0"+
    "\1\274\46\0\1\275\72\0\1\276\45\0\1\277\60\0"+
    "\1\300\25\0\1\301\34\0\2\301\1\0\2\301\43\0"+
    "\1\302\3\0\2\302\1\0\2\302\16\0\1\303\3\0"+
    "\21\303\4\0\2\304\1\0\2\304\4\0\2\305\1\0"+
    "\1\305\1\0\1\303\3\0\1\306\1\303\1\307\1\0"+
    "\22\303\4\0\2\304\1\0\2\304\4\0\2\305\1\0"+
    "\1\305\5\0\1\306\53\0\1\306\31\0\2\306\1\0"+
    "\2\306\16\0\1\310\3\0\21\310\22\0\1\311\33\0"+
    "\1\311\1\0\2\312\1\0\2\312\4\0\2\313\1\0"+
    "\2\313\1\310\1\0\1\314\2\0\1\310\1\315\1\0"+
    "\22\310\22\0\1\311\6\0\1\304\24\0\1\311\1\0"+
    "\2\312\1\0\2\312\4\0\2\313\1\0\2\313\2\0"+
    "\1\314\33\0\2\313\1\0\2\313\16\0\1\316\3\0"+
    "\21\316\4\0\2\314\1\0\2\314\16\0\1\303\3\0"+
    "\21\303\1\0\1\317\20\0\1\320\33\0\1\320\1\0"+
    "\2\321\1\0\2\321\11\0\1\316\1\0\1\314\2\0"+
    "\1\316\1\322\1\0\22\316\4\0\2\317\1\0\2\317"+
    "\24\0\1\155\17\0\1\64\20\0\1\320\6\0\1\312"+
    "\24\0\1\320\1\0\2\321\1\0\2\321\13\0\1\314"+
    "\51\0\1\323\33\0\1\323\17\0\1\323\6\0\1\321"+
    "\24\0\1\323";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9196];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\53\0\1\11\66\0\1\1\45\0"+
    "\1\1\102\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	ArrayList<Token> tokens = new ArrayList<>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    

	tokens.forEach(token -> System.out.println("LINHA: "+token.getLine()+"   "+token.getText()));

    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* */
            }
            // fall through
          case 4: break;
          case 2:
            { System.out.print(yytext());
            }
            // fall through
          case 5: break;
          case 3:
            { tokens.add(new Token(yyline,yytext(), ""));
            }
            // fall through
          case 6: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexicalAnalyzer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexicalAnalyzer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexicalAnalyzer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
