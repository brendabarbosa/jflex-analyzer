Gramática Etapa 1:

<S> ::= <Decl>;| <Decl>;<S>
<Decl> ::= <Tipo><Vars> | <Tipo><Ident>
<SingleDecl> ::= <Tipo><Ident>
<Vars> ::= <Ident> , <Vars> | <Ident>
<Ident> ::= id | id[num]
<Tipo> ::= int|char|float
 

Gramática Etapa 2:

<If> ::= if(<Cond>) {<Comando>} <Else>
<Else> ::= else{<Comando>} | ε
<Cond> ::= id <OperadorR> id
<OperadorR> ::= ==  | != | <= | >= | < | >
<Comando>  ::= id <OperadorA> ( id |  id <OperadorM> id) ; <addComando>
<addComando> ::= <Comando> | ε
<OperadorM> ::= + | - | * | /
<OperadorA> ::= = | += | -= | *= | /=

<Switch> ::= switch(id) { <Cases> <Default> }
<Cases> ::= case num: {<Comando>} break; | case <OpcCase>: {<Comando>} break; <Cases>
<Default> :: default: {<Comando>} | ε
<Comando>  ::= id <OperadorA> ( id |  id <OperadorM> id) ; <addComando>
<addComando> ::= <Comando> | ε
<OperadorM> ::= + | - | * | /
<OperadorA> ::= = | += | -= | *= | /=

Gramática Etapa 3:

<While> ::= while(<Cond>) {<Comando>}
<Inc> ::= <Ident>++
<Dec> ::= <Ident>--
<IncDec> ::= <Inc> | <Dec>
<For> ::= for(<SingleDecl>; <Cond>; <IncDec>) {<Comando>}
<Cond> ::= id <OperadorR> id
<OperadorR> ::= ==  | != | <= | >= | < | >
<Comando>  ::= id <OperadorA> ( id |  id <OperadorM> id) ; <addComando>
<addComando> ::= <Comando> | ε
<OperadorM> ::= + | - | * | /
<OperadorA> ::= = | += | -= | *= | /=
